geom_point(data = inaug.repu.t, aes(x = Dates[1:5], y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates[1:5], y = Words[1:5]), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates[1:5], y = Words[1:5]), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
ggplot() +
geom_point(data = inaug.demo[1:5, ], aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t[1:5, ], aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
inaug$Dates <- as.Date(inaug$Dates, format='%m/%d/%Y')
inaug$Words <- as.numeric(inaug$Words)
# in order to use Corpus, DataframeSource
names(inaug)[names(inaug) == "file.name"] <- "doc_id"
names(inaug)[names(inaug) == "speech"] <- "text"
# inaug$speech <- strsplit(inaug$speech, split = '(\\s|[[:punct:]])+')
# Only keep rows that the Predsidents belong to Democratic or Republican
inaug.demo <- inaug[inaug$Party == "Democratic", ]
inaug.repu <- inaug[inaug$Party == "Republican", ]
demo.all<-Corpus(DataframeSource(inaug.demo))
repu.all<-Corpus(DataframeSource(inaug.repu))
# Democratic
demo.all<-tm_map(demo.all, stripWhitespace)
demo.all<-tm_map(demo.all, content_transformer(tolower))
demo.all<-tm_map(demo.all, removeNumbers)
demo.all<-tm_map(demo.all, removeWords, stopwords("english"))
demo.all<-tm_map(demo.all, removeWords, character(0))
demo.all<-tm_map(demo.all, removePunctuation)
tdm.demo.all<-TermDocumentMatrix(demo.all)
tdm.demo.tidy=tidy(tdm.demo.all)
tdm.demo.overall=summarise(group_by(tdm.demo.tidy, term), sum(count))
# Inspect an wordcloud
wordcloud(tdm.demo.overall$term, tdm.demo.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# compute TF-IDF weighted document-term matrices for individual Democratic speeches
demo.dtm <- DocumentTermMatrix(demo.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
demo.dtm=tidy(demo.dtm)
demo.dtm.order <- demo.dtm[order(demo.dtm$count, decreasing = TRUE), ]
# head(demo.dtm.order, 10)
# Republican
repu.all<-tm_map(repu.all, stripWhitespace)
repu.all<-tm_map(repu.all, content_transformer(tolower))
repu.all<-tm_map(repu.all, removeNumbers)
repu.all<-tm_map(repu.all, removeWords, stopwords("english"))
repu.all<-tm_map(repu.all, removeWords, character(0))
repu.all<-tm_map(repu.all, removePunctuation)
tdm.repu.all<-TermDocumentMatrix(repu.all)
tdm.repu.tidy=tidy(tdm.repu.all)
tdm.repu.overall=summarise(group_by(tdm.repu.tidy, term), sum(count))
# Inspect an wordcloud
wordcloud(tdm.repu.overall$term, tdm.demo.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# compute TF-IDF weighted document-term matrices for individual Republican speeches
repu.dtm <- DocumentTermMatrix(repu.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
repu.dtm=tidy(repu.dtm)
repu.dtm.order <- repu.dtm[order(repu.dtm$count, decreasing = TRUE), ]
# head(repu.dtm.order, 10)
inaug.repu.t <- inaug.repu[inaug.repu$doc_id != "DonaldJTrump-1", ]
ggplot() +
geom_point(data = inaug.demo[1:5, ], aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t[1:5, ], aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
?legend
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg") +
legend("topright")
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg") +
legend("topright", legend)
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Wordg")
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Words")
# Democratic Sentiment
demo.emotion <- merge(x = tdm.demo.overall, y = get_sentiments("nrc"), by.x = "term", by.y = "word")
names(demo.emotion)[names(demo.emotion) == "sum(count)"] <- "Frequency"
demo.sum.emotion <- demo.emotion %>%
select(Frequency, sentiment)
# colSums(table(demo.sum.emotion))
barplot(colSums(table(demo.sum.emotion)), col = "lightskyblue1",
main = "Democratic Word Frequency VS Word Sentiment",
ylab = "Frequency", xlab = "Sentiment",
border = NA, cex.names=0.7)
View(demo.sum.emotion)
colSums(table(demo.sum.emotion))
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Words")
get_sentiments("afinn")
head(get_sentiments("afinn"))
demo.emotion <- merge(x = tdm.demo.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
# Democratic NRC Sentiment
demo.emotion.nrc <- merge(x = tdm.demo.overall, y = get_sentiments("nrc"), by.x = "term", by.y = "word")
names(demo.emotion.nrc)[names(demo.emotion.nrc) == "sum(count)"] <- "Frequency"
demo.sum.emotion.nrc <- demo.emotion.nrc %>%
select(Frequency, sentiment)
# colSums(table(demo.sum.emotion.nrc))
barplot(colSums(table(demo.sum.emotion.nrc)), col = "lightskyblue1",
main = "Democratic Word Frequency VS Word Sentiment",
ylab = "Frequency", xlab = "Sentiment",
border = NA, cex.names=0.7)
# Republican NRC Sentiment
repu.emotion.nrc <- merge(x = tdm.repu.overall, y = get_sentiments("nrc"), by.x = "term", by.y = "word")
names(repu.emotion.nrc)[names(repu.emotion.nrc) == "sum(count)"] <- "Frequency"
repu.sum.emotion.nrc <- repu.emotion.nrc %>%
select(Frequency, sentiment)
# colSums(table(repu.sum.emotion.nrc))
barplot(colSums(table(repu.sum.emotion.nrc)), col = "lightskyblue1",
main = "Republican Word Frequency VS Word Sentiment",
ylab = "Frequency", xlab = "Sentiment",
border = NA, cex.names=0.7)
demo.emotion.af <- merge(x = tdm.demo.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
View(demo.emotion.af)
names(demo.emotion.af)[names(demo.emotion.af) == "sum(count)"] <- "Frequency"
demo.sum.emotion.af <- demo.emotion.af %>%
select(Frequency, sentiment)
demo.sum.emotion.af <- demo.emotion.af %>%
select(Frequency, score)
View(demo.sum.emotion.af)
colSums(table(demo.sum.emotion))
colSums(table(demo.sum.emotion.af))
barplot(colSums(table(demo.sum.emotion.af)), col = "lightskyblue3",
main = "Democratic Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=0.7)
barplot(colSums(table(repu.sum.emotion.af)), col = "lightskyblue3",
main = "Republican Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=0.7)
# Republican Afinn Sentiment
# head(get_sentiments("afinn"))
repu.emotion.af <- merge(x = tdm.repu.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
names(repu.emotion.af)[names(repu.emotion.af) == "sum(count)"] <- "Frequency"
repu.sum.emotion.af <- repu.emotion.af %>%
select(Frequency, score)
# colSums(table(repu.sum.emotion.af))
barplot(colSums(table(repu.sum.emotion.af)), col = "lightskyblue3",
main = "Republican Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=0.7)
barplot(colSums(table(demo.sum.emotion.af)), col = "lightskyblue3",
main = "Democratic Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=1)
barplot(colSums(table(repu.sum.emotion.af)), col = "lightskyblue3",
main = "Republican Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=1)
fpath <- file.path("~", "GitHub", "Spring2018-Project1-xinrouli", "data", "InauguralSpeeches")
fpath
file.name <- dir(../GitHub/Spring2018-Project1-xinrouli/data/InauguralSpeeches)
file.name <- dir(./GitHub/Spring2018-Project1-xinrouli/data/InauguralSpeeches)
?dir()
file.name <- dir(path = "../GitHub/Spring2018-Project1-xinrouli/data/InauguralSpeeches")
speech <- c()
file.name
file.name <- dir(path = "..\GitHub\Spring2018-Project1-xinrouli\data\InauguralSpeeches")
getwd()
setwd("~/GitHub/Spring2018-Project1-xinrouli/doc")
file.name <- dir(path = "..\data\InauguralSpeeches")
file.name <- dir(path = "..\\data\\InauguralSpeeches")
file.name
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# load packages
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(qdap)
library(xlsx)
library(dplyr)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(syuzhet)
library(ggplot2)
library(topicmodels)
#################### load dataset
# inaug.info
inaug.info <- read.xlsx("../data/InaugurationInfo.xlsx", 1, stringsAsFactors = FALSE)
# inaug.dates
inaug.dates <- read.csv("../data/inaug.dates.csv")
# inaug.speech
fpath <- file.path("~", "GitHub", "Spring2018-Project1-xinrouli", "data", "InauguralSpeeches")
file.name <- dir(fpath)
speech <- c()
for (j in file.name){
location <- paste("../data/InauguralSpeeches/", j, sep = "")
speech[j] <- paste(readLines(location, n=-1, skipNul=TRUE), collapse=" ")
}
inaug.speech <- data.frame(file.name, speech, stringsAsFactors = FALSE)
rownames(inaug.speech) <- NULL
substr.func <- function(df){
return(substr(df[1], start = 6, stop = nchar(df[1])-4))
}
inaug.speech$file.name <- apply(inaug.speech, 1, substr.func)
paste.func.info <- function(df){
return(paste(df[2], "-", df[3], sep = ""))
}
inaug.info$file.name <- apply(inaug.info, 1, paste.func.info)
paste.func.dates <- function(df){
return(paste(df[1], "-", df[3], sep = ""))
}
inaug.dates$file.name <- apply(inaug.dates, 1, paste.func.dates)
inaug.info.speech <- merge(x = inaug.info, y = inaug.speech, by.x = "file.name", by.y = "file.name")
inaug <- merge(x = inaug.info.speech, y = inaug.dates, by.x = "file.name", by.y = "file.name")
# in order to use ggplot
inaug$Dates <- as.Date(inaug$Dates, format='%m/%d/%Y')
inaug$Words <- as.numeric(inaug$Words)
# in order to use Corpus, DataframeSource
names(inaug)[names(inaug) == "file.name"] <- "doc_id"
names(inaug)[names(inaug) == "speech"] <- "text"
# inaug$speech <- strsplit(inaug$speech, split = '(\\s|[[:punct:]])+')
# Only keep rows that the Predsidents belong to Democratic or Republican
inaug.demo <- inaug[inaug$Party == "Democratic", ]
inaug.repu <- inaug[inaug$Party == "Republican", ]
demo.all<-Corpus(DataframeSource(inaug.demo))
repu.all<-Corpus(DataframeSource(inaug.repu))
# Democratic
demo.all<-tm_map(demo.all, stripWhitespace)
demo.all<-tm_map(demo.all, content_transformer(tolower))
demo.all<-tm_map(demo.all, removeNumbers)
demo.all<-tm_map(demo.all, removeWords, stopwords("english"))
demo.all<-tm_map(demo.all, removeWords, character(0))
demo.all<-tm_map(demo.all, removePunctuation)
tdm.demo.all<-TermDocumentMatrix(demo.all)
tdm.demo.tidy=tidy(tdm.demo.all)
tdm.demo.overall=summarise(group_by(tdm.demo.tidy, term), sum(count))
# Inspect an wordcloud
wordcloud(tdm.demo.overall$term, tdm.demo.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# compute TF-IDF weighted document-term matrices for individual Democratic speeches
demo.dtm <- DocumentTermMatrix(demo.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
demo.dtm=tidy(demo.dtm)
demo.dtm.order <- demo.dtm[order(demo.dtm$count, decreasing = TRUE), ]
# head(demo.dtm.order, 10)
# Republican
repu.all<-tm_map(repu.all, stripWhitespace)
repu.all<-tm_map(repu.all, content_transformer(tolower))
repu.all<-tm_map(repu.all, removeNumbers)
repu.all<-tm_map(repu.all, removeWords, stopwords("english"))
repu.all<-tm_map(repu.all, removeWords, character(0))
repu.all<-tm_map(repu.all, removePunctuation)
tdm.repu.all<-TermDocumentMatrix(repu.all)
tdm.repu.tidy=tidy(tdm.repu.all)
tdm.repu.overall=summarise(group_by(tdm.repu.tidy, term), sum(count))
# Inspect an wordcloud
wordcloud(tdm.repu.overall$term, tdm.demo.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# compute TF-IDF weighted document-term matrices for individual Republican speeches
repu.dtm <- DocumentTermMatrix(repu.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
repu.dtm=tidy(repu.dtm)
repu.dtm.order <- repu.dtm[order(repu.dtm$count, decreasing = TRUE), ]
# head(repu.dtm.order, 10)
# Plot Words vs Dates
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu.t, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Words")
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# load packages
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(qdap)
library(xlsx)
library(dplyr)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(syuzhet)
library(ggplot2)
library(topicmodels)
#################### load dataset
# inaug.info
inaug.info <- read.xlsx("../data/InaugurationInfo.xlsx", 1, stringsAsFactors = FALSE)
# inaug.dates
inaug.dates <- read.csv("../data/inaug.dates.csv")
# inaug.speech
fpath <- file.path("~", "GitHub", "Spring2018-Project1-xinrouli", "data", "InauguralSpeeches")
file.name <- dir(fpath)
speech <- c()
for (j in file.name){
location <- paste("../data/InauguralSpeeches/", j, sep = "")
speech[j] <- paste(readLines(location, n=-1, skipNul=TRUE), collapse=" ")
}
inaug.speech <- data.frame(file.name, speech, stringsAsFactors = FALSE)
rownames(inaug.speech) <- NULL
substr.func <- function(df){
return(substr(df[1], start = 6, stop = nchar(df[1])-4))
}
inaug.speech$file.name <- apply(inaug.speech, 1, substr.func)
paste.func.info <- function(df){
return(paste(df[2], "-", df[3], sep = ""))
}
inaug.info$file.name <- apply(inaug.info, 1, paste.func.info)
paste.func.dates <- function(df){
return(paste(df[1], "-", df[3], sep = ""))
}
inaug.dates$file.name <- apply(inaug.dates, 1, paste.func.dates)
inaug.info.speech <- merge(x = inaug.info, y = inaug.speech, by.x = "file.name", by.y = "file.name")
inaug <- merge(x = inaug.info.speech, y = inaug.dates, by.x = "file.name", by.y = "file.name")
# in order to use ggplot
inaug$Dates <- as.Date(inaug$Dates, format='%m/%d/%Y')
inaug$Words <- as.numeric(inaug$Words)
# in order to use Corpus, DataframeSource
names(inaug)[names(inaug) == "file.name"] <- "doc_id"
names(inaug)[names(inaug) == "speech"] <- "text"
# inaug$speech <- strsplit(inaug$speech, split = '(\\s|[[:punct:]])+')
# Only keep rows that the Predsidents belong to Democratic or Republican
inaug.demo <- inaug[inaug$Party == "Democratic", ]
inaug.repu <- inaug[inaug$Party == "Republican", ]
demo.all<-Corpus(DataframeSource(inaug.demo))
repu.all<-Corpus(DataframeSource(inaug.repu))
# Democratic
demo.all<-tm_map(demo.all, stripWhitespace)
demo.all<-tm_map(demo.all, content_transformer(tolower))
demo.all<-tm_map(demo.all, removeNumbers)
demo.all<-tm_map(demo.all, removeWords, stopwords("english"))
demo.all<-tm_map(demo.all, removeWords, character(0))
demo.all<-tm_map(demo.all, removePunctuation)
tdm.demo.all<-TermDocumentMatrix(demo.all)
tdm.demo.tidy=tidy(tdm.demo.all)
tdm.demo.overall=summarise(group_by(tdm.demo.tidy, term), sum(count))
# Inspect an wordcloud
wordcloud(tdm.demo.overall$term, tdm.demo.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# compute TF-IDF weighted document-term matrices for individual Democratic speeches
demo.dtm <- DocumentTermMatrix(demo.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
demo.dtm=tidy(demo.dtm)
demo.dtm.order <- demo.dtm[order(demo.dtm$count, decreasing = TRUE), ]
# head(demo.dtm.order, 10)
# Republican
repu.all<-tm_map(repu.all, stripWhitespace)
repu.all<-tm_map(repu.all, content_transformer(tolower))
repu.all<-tm_map(repu.all, removeNumbers)
repu.all<-tm_map(repu.all, removeWords, stopwords("english"))
repu.all<-tm_map(repu.all, removeWords, character(0))
repu.all<-tm_map(repu.all, removePunctuation)
tdm.repu.all<-TermDocumentMatrix(repu.all)
tdm.repu.tidy=tidy(tdm.repu.all)
tdm.repu.overall=summarise(group_by(tdm.repu.tidy, term), sum(count))
# Inspect an wordcloud
wordcloud(tdm.repu.overall$term, tdm.demo.overall$`sum(count)`,
scale=c(5,0.5),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9,"Blues"))
# compute TF-IDF weighted document-term matrices for individual Republican speeches
repu.dtm <- DocumentTermMatrix(repu.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
repu.dtm=tidy(repu.dtm)
repu.dtm.order <- repu.dtm[order(repu.dtm$count, decreasing = TRUE), ]
# head(repu.dtm.order, 10)
# Plot Words vs Dates
ggplot() +
geom_point(data = inaug.demo, aes(x = Dates, y = Words), color = "blue") +
geom_point(data = inaug.repu, aes(x = Dates, y = Words), color = "red") +
labs(title = "Inaugural Dates vs Words Between two Parties",
x = "Inaugural Dates", y = "Inaugural Words")
# Democratic NRC Sentiment
demo.emotion.nrc <- merge(x = tdm.demo.overall, y = get_sentiments("nrc"), by.x = "term", by.y = "word")
names(demo.emotion.nrc)[names(demo.emotion.nrc) == "sum(count)"] <- "Frequency"
demo.sum.emotion.nrc <- demo.emotion.nrc %>%
select(Frequency, sentiment)
# colSums(table(demo.sum.emotion.nrc))
barplot(colSums(table(demo.sum.emotion.nrc)), col = "lightskyblue1",
main = "Democratic Word Frequency VS Word Sentiment",
ylab = "Frequency", xlab = "Sentiment",
border = NA, cex.names=0.7)
# Republican NRC Sentiment
repu.emotion.nrc <- merge(x = tdm.repu.overall, y = get_sentiments("nrc"), by.x = "term", by.y = "word")
names(repu.emotion.nrc)[names(repu.emotion.nrc) == "sum(count)"] <- "Frequency"
repu.sum.emotion.nrc <- repu.emotion.nrc %>%
select(Frequency, sentiment)
# colSums(table(repu.sum.emotion.nrc))
barplot(colSums(table(repu.sum.emotion.nrc)), col = "lightskyblue1",
main = "Republican Word Frequency VS Word Sentiment",
ylab = "Frequency", xlab = "Sentiment",
border = NA, cex.names=0.7)
# Democratic Afinn Sentiment
# head(get_sentiments("afinn"))
demo.emotion.af <- merge(x = tdm.demo.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
names(demo.emotion.af)[names(demo.emotion.af) == "sum(count)"] <- "Frequency"
demo.sum.emotion.af <- demo.emotion.af %>%
select(Frequency, score)
# colSums(table(demo.sum.emotion.af))
barplot(colSums(table(demo.sum.emotion.af)), col = "lightskyblue3",
main = "Democratic Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names=1)
# Republican Afinn Sentiment
# head(get_sentiments("afinn"))
repu.emotion.af <- merge(x = tdm.repu.overall, y = get_sentiments("afinn"), by.x = "term", by.y = "word")
names(repu.emotion.af)[names(repu.emotion.af) == "sum(count)"] <- "Frequency"
repu.sum.emotion.af <- repu.emotion.af %>%
select(Frequency, score)
# colSums(table(repu.sum.emotion.af))
barplot(colSums(table(repu.sum.emotion.af)), col = "lightskyblue3",
main = "Republican Word Frequency VS Word Sentiment Score",
ylab = "Frequency", xlab = "Sentiment Score",
border = NA, cex.names = 1)
